#!/usr/bin/env node

/**
 * Simple Pull Shark Achievement Generator
 * Usage: node scripts/pullShark.js
 */

const https = require('https');
const { Buffer } = require('buffer');

// Configuration
const GITHUB_TOKEN = process.env.GITHUB_TOKEN || '';
const GITHUB_USERNAME = process.env.GITHUB_USERNAME || 'Dlanang';

if (!GITHUB_TOKEN) {
  console.error('❌ GITHUB_TOKEN environment variable is required!');
  console.error('💡 Set it in your .env file or run: export GITHUB_TOKEN=your_token_here');
  process.exit(1);
}

// Simple sleep function
const sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));

// GitHub API helper
function githubRequest(path, method = 'GET', data = null) {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'api.github.com',
      path: path,
      method: method,
      headers: {
        'Authorization': `token ${GITHUB_TOKEN}`,
        'Accept': 'application/vnd.github.v3+json',
        'User-Agent': 'GitHub-Achievement-Generator'
      }
    };

    if (data) {
      options.headers['Content-Type'] = 'application/json';
    }

    const req = https.request(options, (res) => {
      let body = '';
      res.on('data', (chunk) => body += chunk);
      res.on('end', () => {
        try {
          const result = body ? JSON.parse(body) : {};
          if (res.statusCode >= 200 && res.statusCode < 300) {
            resolve(result);
          } else {
            reject(new Error(`HTTP ${res.statusCode}: ${result.message || body}`));
          }
        } catch (err) {
          reject(new Error(`Parse error: ${err.message}`));
        }
      });
    });

    req.on('error', reject);
    
    if (data) {
      req.write(JSON.stringify(data));
    }
    
    req.end();
  });
}

async function generatePullShark() {
  console.log('🦈 Starting Pull Shark Achievement Generation...');
  
  try {
    const repoName = 'cek-buat';
    const timestamp = Date.now();
    const branchName = `pull-shark-${timestamp}`;
    const fileName = `achievements/pull-shark-${timestamp}.md`;
    
    console.log(`📋 Target repo: ${GITHUB_USERNAME}/${repoName}`);
    console.log(`🌿 Creating branch: ${branchName}`);
    
    // Get main branch info
    console.log('📡 Getting main branch info...');
    const mainBranch = await githubRequest(`/repos/${GITHUB_USERNAME}/${repoName}/branches/main`);
    
    // Create new branch
    console.log('🌿 Creating new branch...');
    await githubRequest(`/repos/${GITHUB_USERNAME}/${repoName}/git/refs`, 'POST', {
      ref: `refs/heads/${branchName}`,
      sha: mainBranch.commit.sha
    });
    console.log('✅ Branch created successfully');
    
    // Create file content
    const fileContent = `# Pull Shark Achievement Generator

Generated on: ${new Date().toISOString()}

## 🦈 Pull Shark Progress

This file was automatically created to help unlock the Pull Shark achievement on GitHub.

### Requirements:
- ✅ 2+ merged pull requests  
- ✅ Valid contribution
- ✅ Automated generation

### Stats:
- Date: ${new Date().toLocaleDateString('id-ID')}
- Time: ${new Date().toLocaleTimeString('id-ID')}
- Branch: ${branchName}
- File: ${fileName}
- Timestamp: ${timestamp}

## About This Generator

This tool helps you automatically generate the necessary GitHub activity to unlock achievement badges like:

- 🦈 Pull Shark (2+ merged PRs)
- 🌌 Galaxy Brain (2+ helpful discussion answers)  
- 🏔️ Arctic Code Vault Contributor (contribute to archived repos)
- 🌟 Starstruck (repository with 16+ stars)

### How it works:
1. Creates a new branch from main
2. Adds this achievement documentation file
3. Creates a pull request
4. Automatically merges the PR
5. Repeat as needed to reach 2+ merged PRs

---

*Generated by GitHub Achievement Generator*  
*Repository: https://github.com/${GITHUB_USERNAME}/${repoName}*
*Timestamp: ${new Date().toISOString()}*
`;

    // Create file in the branch
    console.log('📝 Creating achievement file...');
    await githubRequest(`/repos/${GITHUB_USERNAME}/${repoName}/contents/${fileName}`, 'PUT', {
      message: `🦈 Add Pull Shark achievement file ${timestamp}`,
      content: Buffer.from(fileContent).toString('base64'),
      branch: branchName
    });
    console.log('✅ File created successfully');
    
    // Wait a bit before creating PR
    console.log('⏳ Waiting before creating PR...');
    await sleep(2000);
    
    // Create Pull Request
    console.log('📋 Creating Pull Request...');
    const pr = await githubRequest(`/repos/${GITHUB_USERNAME}/${repoName}/pulls`, 'POST', {
      title: `🦈 Pull Shark Achievement Generator #${timestamp}`,
      head: branchName,
      base: 'main',
      body: `Auto-generated PR untuk mendapatkan Pull Shark achievement 🦈

## What this PR does:
- ✅ Menambahkan file achievement documentation
- ✅ Automated untuk GitHub badges  
- ✅ Part of Pull Shark generation process

## Achievement Progress:
- 🎯 Target: Pull Shark (2+ merged PRs)
- 🤖 Method: Automated generation
- 📅 Created: ${new Date().toLocaleDateString('id-ID')}
- ⏰ Time: ${new Date().toLocaleTimeString('id-ID')}

This PR can be safely merged as it only adds documentation for the achievement generation process.

### Generated Content:
- Branch: \`${branchName}\`
- File: \`${fileName}\`
- Timestamp: \`${timestamp}\`

---
*Auto-generated by GitHub Achievement Generator*
*For more achievements, visit: https://github.com/${GITHUB_USERNAME}/${repoName}*`
    });
    
    console.log(`✅ Pull Request created: #${pr.number}`);
    console.log(`🔗 URL: ${pr.html_url}`);
    
    // Wait before merging
    console.log('⏳ Waiting before auto-merge...');
    await sleep(3000);
    
    // Merge the PR
    console.log('🔀 Attempting to merge PR...');
    try {
      await githubRequest(`/repos/${GITHUB_USERNAME}/${repoName}/pulls/${pr.number}/merge`, 'PUT', {
        commit_title: `🦈 Merge Pull Shark achievement generator #${timestamp}`,
        merge_method: 'merge'
      });
      console.log('✅ Pull Request merged successfully!');
    } catch (mergeError) {
      console.log(`⚠️ Could not auto-merge PR: ${mergeError.message}`);
      console.log(`💡 Please manually merge PR #${pr.number} at: ${pr.html_url}`);
    }
    
    console.log('\n🎉 Pull Shark achievement generation completed!');
    console.log('📈 Check your GitHub profile in a few minutes for the badge.');
    console.log(`🔗 Profile URL: https://github.com/${GITHUB_USERNAME}`);
    console.log('\n💡 To generate more PRs, run this script again!');
    console.log('🦈 You need 2+ merged PRs for the Pull Shark achievement.');
    
  } catch (err) {
    console.error('❌ Error generating Pull Shark achievement:', err.message);
    throw err;
  }
}

// Run the generator
generatePullShark()
  .then(() => {
    console.log('\n🏆 Pull Shark generation finished successfully!');
    process.exit(0);
  })
  .catch((err) => {
    console.error('\n💥 Pull Shark generation failed:', err.message);
    process.exit(1);
  });