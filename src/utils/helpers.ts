/**
 * Utility helper functions for GitHub Achievement Generator
 */

/**
 * Delay execution for specified milliseconds
 */
export function delay(ms: number): Promise<void> {
  return new Promise(resolve => setTimeout(resolve, ms));
}

/**
 * Generate random string for unique identifiers
 */
export function generateRandomString(length: number = 8): string {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
  let result = '';
  for (let i = 0; i < length; i++) {
    result += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return result;
}

/**
 * Format date for filename usage
 */
export function formatDateForFilename(date: Date = new Date()): string {
  return date.toISOString().split('T')[0].replace(/-/g, '');
}

/**
 * Get current timestamp
 */
export function getTimestamp(): string {
  return new Date().toISOString();
}

/**
 * Validate GitHub token format
 */
export function isValidGitHubToken(token: string): boolean {
  return token.startsWith('ghp_') || token.startsWith('github_pat_');
}

/**
 * Extract repo owner and name from full repo string
 */
export function parseRepoString(repo: string): { owner: string; repo: string } {
  const parts = repo.split('/');
  if (parts.length !== 2) {
    throw new Error('Invalid repository format. Expected: owner/repo');
  }
  return { owner: parts[0], repo: parts[1] };
}

/**
 * Create achievement content template
 */
export function createAchievementContent(
  achievementName: string, 
  index: number, 
  metadata: Record<string, any> = {}
): string {
  return `# ${achievementName} Achievement #${index}

Generated on: ${getTimestamp()}

## 🏆 ${achievementName} Progress

This file was automatically created to help unlock the ${achievementName} achievement on GitHub.

### Metadata:
${Object.entries(metadata).map(([key, value]) => `- ${key}: ${value}`).join('\n')}

### Stats:
- File: ${index}
- Date: ${new Date().toLocaleDateString('id-ID')}
- Time: ${new Date().toLocaleTimeString('id-ID')}
- Random ID: ${generateRandomString(12)}

---

*Generated by GitHub Achievement Generator*
*Repository: https://github.com/Dlanang/cek-buat*
`;
}

/**
 * Sleep for random time between min and max milliseconds
 */
export async function randomDelay(min: number = 1000, max: number = 5000): Promise<void> {
  const randomTime = Math.floor(Math.random() * (max - min + 1)) + min;
  await delay(randomTime);
}

/**
 * Retry function with exponential backoff
 */
export async function retryWithBackoff<T>(
  fn: () => Promise<T>,
  maxRetries: number = 3,
  baseDelay: number = 1000
): Promise<T> {
  for (let i = 0; i < maxRetries; i++) {
    try {
      return await fn();
    } catch (error) {
      if (i === maxRetries - 1) throw error;
      
      const delayTime = baseDelay * Math.pow(2, i);
      await delay(delayTime);
    }
  }
  throw new Error('Max retries exceeded');
}