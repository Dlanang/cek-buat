#!/usr/bin/env node

/**
 * Quick Pull Shark Achievement Generator
 * Run: npm run generate:pull-shark
 */

// Simple console logging functions
const log = (msg: string, ...args: any[]) => {
  if (typeof console !== 'undefined') {
    console.log(msg, ...args);
  }
};

const error = (msg: string, ...args: any[]) => {
  if (typeof console !== 'undefined') {
    console.error(msg, ...args);
  }
};

// Configuration
const GITHUB_TOKEN = process.env.GITHUB_TOKEN || '';
const GITHUB_USERNAME = process.env.GITHUB_USERNAME || 'Dlanang';

if (!GITHUB_TOKEN) {
  error('❌ GITHUB_TOKEN environment variable is required!');
  error('💡 Set it in your .env file or run: export GITHUB_TOKEN=your_token_here');
  process.exit(1);
}

async function generatePullShark() {
  log('🦈 Starting Pull Shark Achievement Generation...');
  
  try {
    // We'll use a simple approach with fetch API since Octokit might not be available
    const repoName = 'cek-buat';
    const branchName = `pull-shark-${Date.now()}`;
    const fileName = `achievements/pull-shark-${Date.now()}.md`;
    
    log(`📋 Target repo: ${GITHUB_USERNAME}/${repoName}`);
    log(`🌿 Creating branch: ${branchName}`);
    
    // Get main branch info
    const mainResponse = await fetch(`https://api.github.com/repos/${GITHUB_USERNAME}/${repoName}/branches/main`, {
      headers: {
        'Authorization': `token ${GITHUB_TOKEN}`,
        'Accept': 'application/vnd.github.v3+json'
      }
    });
    
    if (!mainResponse.ok) {
      throw new Error(`Failed to get main branch: ${mainResponse.statusText}`);
    }
    
    const mainBranch = await mainResponse.json();
    
    // Create new branch
    const createBranchResponse = await fetch(`https://api.github.com/repos/${GITHUB_USERNAME}/${repoName}/git/refs`, {
      method: 'POST',
      headers: {
        'Authorization': `token ${GITHUB_TOKEN}`,
        'Accept': 'application/vnd.github.v3+json',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        ref: `refs/heads/${branchName}`,
        sha: mainBranch.commit.sha
      })
    });
    
    if (!createBranchResponse.ok) {
      throw new Error(`Failed to create branch: ${createBranchResponse.statusText}`);
    }
    
    log('✅ Branch created successfully');
    
    // Create file content
    const fileContent = `# Pull Shark Achievement Generator

Generated on: ${new Date().toISOString()}

## 🦈 Pull Shark Progress

This file was automatically created to help unlock the Pull Shark achievement on GitHub.

### Requirements:
- ✅ 2+ merged pull requests  
- ✅ Valid contribution
- ✅ Automated generation

### Stats:
- Date: ${new Date().toLocaleDateString('id-ID')}
- Time: ${new Date().toLocaleTimeString('id-ID')}
- Branch: ${branchName}
- File: ${fileName}

## About This Generator

This tool helps you automatically generate the necessary GitHub activity to unlock achievement badges like:

- 🦈 Pull Shark (2+ merged PRs)
- 🌌 Galaxy Brain (2+ helpful discussion answers)  
- 🏔️ Arctic Code Vault Contributor (contribute to archived repos)
- 🌟 Starstruck (repository with 16+ stars)

---

*Generated by GitHub Achievement Generator*  
*Repository: https://github.com/${GITHUB_USERNAME}/${repoName}*
`;

    // Create file in the branch
    const createFileResponse = await fetch(`https://api.github.com/repos/${GITHUB_USERNAME}/${repoName}/contents/${fileName}`, {
      method: 'PUT',
      headers: {
        'Authorization': `token ${GITHUB_TOKEN}`,
        'Accept': 'application/vnd.github.v3+json',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        message: `🦈 Add Pull Shark achievement file`,
        content: Buffer.from(fileContent).toString('base64'),
        branch: branchName
      })
    });
    
    if (!createFileResponse.ok) {
      throw new Error(`Failed to create file: ${createFileResponse.statusText}`);
    }
    
    log('✅ File created successfully');
    
    // Wait a bit before creating PR
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // Create Pull Request
    const createPRResponse = await fetch(`https://api.github.com/repos/${GITHUB_USERNAME}/${repoName}/pulls`, {
      method: 'POST',
      headers: {
        'Authorization': `token ${GITHUB_TOKEN}`,
        'Accept': 'application/vnd.github.v3+json',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        title: '🦈 Pull Shark Achievement Generator',
        head: branchName,
        base: 'main',
        body: `Auto-generated PR untuk mendapatkan Pull Shark achievement 🦈

## What this PR does:
- ✅ Menambahkan file achievement documentation
- ✅ Automated untuk GitHub badges  
- ✅ Part of Pull Shark generation process

## Achievement Progress:
- 🎯 Target: Pull Shark (2+ merged PRs)
- 🤖 Method: Automated generation
- 📅 Created: ${new Date().toLocaleDateString('id-ID')}

This PR can be safely merged as it only adds documentation for the achievement generation process.

---
*Auto-generated by GitHub Achievement Generator*`
      })
    });
    
    if (!createPRResponse.ok) {
      throw new Error(`Failed to create PR: ${createPRResponse.statusText}`);
    }
    
    const pr = await createPRResponse.json();
    log(`✅ Pull Request created: #${pr.number}`);
    log(`🔗 URL: ${pr.html_url}`);
    
    // Wait before merging
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // Merge the PR
    const mergePRResponse = await fetch(`https://api.github.com/repos/${GITHUB_USERNAME}/${repoName}/pulls/${pr.number}/merge`, {
      method: 'PUT',
      headers: {
        'Authorization': `token ${GITHUB_TOKEN}`,
        'Accept': 'application/vnd.github.v3+json',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        commit_title: `🦈 Merge Pull Shark achievement generator`,
        merge_method: 'merge'
      })
    });
    
    if (!mergePRResponse.ok) {
      log(`⚠️ Could not auto-merge PR: ${mergePRResponse.statusText}`);
      log(`💡 Please manually merge PR #${pr.number} at: ${pr.html_url}`);
    } else {
      log('✅ Pull Request merged successfully!');
    }
    
    log('\n🎉 Pull Shark achievement generation completed!');
    log('📈 Check your GitHub profile in a few minutes for the badge.');
    log(`🔗 Profile URL: https://github.com/${GITHUB_USERNAME}`);
    
  } catch (err) {
    error('❌ Error generating Pull Shark achievement:', err);
    throw err;
  }
}

// Run if this is the main module
if (require.main === module) {
  generatePullShark()
    .then(() => {
      log('🏆 Pull Shark generation finished!');
      process.exit(0);
    })
    .catch((err) => {
      error('💥 Pull Shark generation failed:', err);
      process.exit(1);
    });
}